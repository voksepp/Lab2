Time complexity analysis

Insert bid: < O(log_2(n)) >
    n is the size of the order book. The bids are sorted in a binary heap so when a new bid is
    inserted the insert method puts it in the end of the binary heap and then calls the bubbleUp
    method. The bubbleUp function calls the swap method until (worst case scenario) the bid has
    reached the root. A full binary tree has the height h = log_2(l)+1 where l is the
    amount of leaves. The size n = 2*l-1. This makes the time complexity O(log_2((n+2)/2)) =
    O(log_2(n))


Trade: < O(log_2(n)) >
    When a trade is made the first element in the sellPriorityQueue and buyPriorityQueue
    matches and therefore should be removed and printed out. The removeFirst method is called
    which calls the removeElement method with the index 0 as an input argument. This method
    swaps the last and [index=0] element and then calls bubbleDown to put it in the correct
    position in the binary heap. The bubbleDown method has the same principle as the bubbleUp
    method and therefore the time complexity is O(log_2(n))

Modifying a bid: < O(log_2 (n)) >
    1.  Old bid is modified with the new value: O(1)
    2.  Priority queue replace method is called with the old bid and the new
        bid as parameters.
            2a.     Index of the old bid is retrieved from the HashMap: O(1)
            2b.     The removeElement method is used to remove the old element
                    from the heap. It calls the bubbleDown method: O(log n)
                    (similar to above).
            2c.     The new bid is inserted, calls the bubbleUp method: O(log n).

Printing the order book: < O(log_2(n)) >
    This is very similar to the trade above, the removeFirst method is used
    in the same way, and therefore the time complexity is also the same.